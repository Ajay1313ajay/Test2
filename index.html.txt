<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cleaner and Key Tracking System</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            color: #333;
            min-height: 100vh;
        }
        #clock {
            font-size: 2em;
            text-align: center;
            margin-bottom: 20px;
            color: #4a90e2;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.1);
        }
        select, button, textarea {
            margin: 10px 5px;
            padding: 10px;
            font-size: 1em;
            border-radius: 5px;
            border: none;
            transition: all 0.3s ease;
        }
        select, textarea {
            background-color: #fff;
            color: #333;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        textarea {
            width: calc(100% - 10px);
            resize: vertical;
        }
        button {
            color: white;
            cursor: pointer;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }
        button:hover {
            transform: translateY(-2px);
        }
        #clockInBtn {
            background-color: #4CAF50;
        }
        #clockOutBtn {
            background-color: #f44336;
        }
        #timeEntries, #timeline {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            margin-top: 20px;
        }
        .entry {
            background-color: white;
            border-radius: 5px;
            padding: 15px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
            width: calc(33.33% - 20px);
            box-sizing: border-box;
        }
        .entry:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }
        h1, h2 {
            color: #4a90e2;
            text-align: center;
            margin-bottom: 30px;
        }
        .controls {
            display: flex;
            justify-content: center;
            flex-wrap: wrap;
            background-color: rgba(255, 255, 255, 0.8);
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        .active-session {
            border-left: 4px solid #4CAF50;
        }
        .completed-session {
            border-left: 4px solid #f44336;
        }
        #message {
            text-align: center;
            margin-top: 10px;
            font-weight: bold;
            padding: 10px;
            border-radius: 5px;
            transition: all 0.3s ease;
        }
        .success-message {
            background-color: rgba(76, 175, 80, 0.1);
            color: #4CAF50;
        }
        .info-message {
            background-color: rgba(33, 150, 243, 0.1);
            color: #2196F3;
        }
        .error-message {
            background-color: rgba(244, 67, 54, 0.1);
            color: #f44336;
        }
        .star {
            color: gold;
            font-size: 1.2em;
            margin-right: 5px;
        }
        .warning {
            color: orange;
            font-size: 1.2em;
            margin-right: 5px;
        }
        .modal {
            display: none;
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.4);
        }
        .modal-content {
            background-color: #fefefe;
            margin: 15% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            max-width: 500px;
            border-radius: 5px;
        }
        .modal-buttons {
            text-align: center;
            margin-top: 20px;
        }
        .modal-buttons button {
            margin: 0 10px;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 1em;
            transition: all 0.3s ease;
        }
        .modal-buttons button:hover {
            transform: translateY(-2px);
        }
        #continueBtn {
            background-color: white;
            color: black;
            border: 2px solid #FFA500;
        }
        #recheckBtn {
            background-color: #4CAF50;
            color: white;
        }
        #warningMessage {
            background-color: white;
            color: #f44336;
            padding: 10px;
            border-radius: 5px;
            font-weight: bold;
            border: 2px solid #f44336;
        }
        .timeline-entry {
            width: 100%;
            background-color: white;
            border-radius: 5px;
            padding: 15px;
            margin-bottom: 10px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        .timeline-entry.success {
            border-left: 4px solid #4CAF50;
        }
        .timeline-entry.info {
            border-left: 4px solid #2196F3;
        }
        .timeline-entry.warning {
            border-left: 4px solid #FFA500;
        }
        .timeline-entry.error {
            border-left: 4px solid #f44336;
        }
        @media (max-width: 768px) {
            .entry {
                width: 100%;
            }
        }
    </style>
</head>
<body>
    <h1>Cleaner and Key Tracking System</h1>
    <div id="clock"></div>
    <div class="controls">
        <select id="cleanerSelect">
            <option value="">Select a cleaner</option>
        </select>
        <select id="keySelect">
            <option value="">Select a key</option>
            <option value="Cleaner 1">Cleaner 1</option>
            <option value="Cleaner 2">Cleaner 2</option>
            <option value="Cleaner 3">Cleaner 3</option>
            <option value="Cleaner 4">Cleaner 4</option>
        </select>
        <textarea id="noteInput" placeholder="Add a note (optional)"></textarea>
        <button id="clockInBtn" onclick="clockIn()">Clock In</button>
        <button id="clockOutBtn" onclick="clockOut()">Clock Out</button>
    </div>
    <div id="message"></div>
    <div id="timeEntries"></div>
    <h2>Action Timeline</h2>
    <div id="timeline"></div>

    <div id="warningModal" class="modal">
        <div class="modal-content">
            <p id="warningMessage"></p>
            <div class="modal-buttons">
                <button id="continueBtn" onclick="confirmClockOut()">⚠️ Continue</button>
                <button id="recheckBtn" onclick="closeModal()">Recheck</button>
            </div>
        </div>
    </div>

    <script>
        function updateClock() {
            document.getElementById('clock').textContent = moment().format('MMMM Do YYYY, h:mm:ss a');
        }
        setInterval(updateClock, 1000);
        updateClock();

        let cleaners = [
            "Alessandra", "Angel Torres", "Jazmin Irushka", "Laura", "Nicholas",
            "Pedro", "Amellalco Alonso Garrido", "Giovanna Mendoza",
            "Jose Leonardo Ferreira", "Magda Valencia", "Patricia Gregorio lozano",
            "Tatiane Mendes"
        ];

        let select = document.getElementById('cleanerSelect');
        cleaners.forEach(cleaner => {
            let option = document.createElement('option');
            option.value = cleaner;
            option.textContent = cleaner;
            select.appendChild(option);
        });

        let timeEntries = {};
        let activeKeys = {};
        let timeline = [];

        function setMessage(message, type) {
            let messageDiv = document.getElementById('message');
            messageDiv.textContent = message;
            messageDiv.className = type + '-message';
            setTimeout(() => messageDiv.textContent = '', 5000);
        }

        function addToTimeline(action, type) {
            timeline.unshift({ time: moment(), action, type });
            updateTimeline();
        }

        function clockIn() {
            let cleaner = document.getElementById('cleanerSelect').value;
            let key = document.getElementById('keySelect').value;
            let note = document.getElementById('noteInput').value.trim();
            if (!cleaner || !key) {
                setMessage('Please select both a cleaner and a key', 'error');
                addToTimeline('Error: Incomplete selection for clock-in', 'error');
                return;
            }
            if (activeKeys[key]) {
                setMessage(`Key ${key} is already in use by ${activeKeys[key]}`, 'error');
                addToTimeline(`Error: Attempted to use Key ${key}, already in use by ${activeKeys[key]}`, 'error');
                return;
            }
            if (!timeEntries[cleaner]) {
                timeEntries[cleaner] = [];
            }
            timeEntries[cleaner].push({
                clockIn: moment(),
                clockOut: null,
                key: key,
                note: note
            });
            activeKeys[key] = cleaner;
            updateEntries();
            setMessage(`${cleaner} clocked in with ${key}`, 'success');
            addToTimeline(`${cleaner} clocked in with ${key}${note ? ' (Note added)' : ''}`, 'success');
            document.getElementById('noteInput').value = '';
        }

        function clockOut() {
            let cleaner = document.getElementById('cleanerSelect').value;
            let currentKey = document.getElementById('keySelect').value;
            if (!cleaner || !timeEntries[cleaner] || timeEntries[cleaner].length === 0) {
                setMessage('No active clock-in for this cleaner', 'error');
                addToTimeline(`Error: Attempted to clock out ${cleaner}, no active session`, 'error');
                return;
            }
            let lastEntry = timeEntries[cleaner][timeEntries[cleaner].length - 1];
            if (lastEntry.clockOut) {
                setMessage('This cleaner is not clocked in', 'error');
                addToTimeline(`Error: Attempted to clock out ${cleaner}, already clocked out`, 'error');
                return;
            }
            if (lastEntry.key !== currentKey) {
                showWarningModal(cleaner, lastEntry.key, currentKey);
            } else {
                performClockOut(cleaner, currentKey, false);
            }
        }

        function showWarningModal(cleaner, originalKey, currentKey) {
            let modal = document.getElementById('warningModal');
            let message = document.getElementById('warningMessage');
            message.textContent = `Warning: ${cleaner} was clocked in with key "${originalKey}" but is clocking out with key "${currentKey}". Do you want to continue?`;
            modal.style.display = "block";
        }

        function closeModal() {
            document.getElementById('warningModal').style.display = "none";
        }

        function confirmClockOut() {
            let cleaner = document.getElementById('cleanerSelect').value;
            let currentKey = document.getElementById('keySelect').value;
            performClockOut(cleaner, currentKey, true);
            closeModal();
        }

        function performClockOut(cleaner, key, keyMismatch) {
            let lastEntry = timeEntries[cleaner][timeEntries[cleaner].length - 1];
            lastEntry.clockOut = moment();
            lastEntry.keyMismatch = keyMismatch;
            delete activeKeys[lastEntry.key];
            updateEntries();
            setMessage(`${cleaner} clocked out`, 'info');
            addToTimeline(`${cleaner} clocked out${keyMismatch ? ' (Key mismatch)' : ''}`, keyMismatch ? 'warning' : 'info');
        }

        function formatDuration(duration) {
            let hours = Math.floor(duration.asHours());
            let minutes = Math.floor(duration.asMinutes()) % 60;
            let seconds = Math.floor(duration.asSeconds()) % 60;
            return `${hours}h ${minutes}m ${seconds}s`;
        }

        function updateEntries() {
            let entriesDiv = document.getElementById('timeEntries');
            entriesDiv.innerHTML = '';
            for (let cleaner in timeEntries) {
                timeEntries[cleaner].forEach((entry, index) => {
                    let entryDiv = document.createElement('div');
                    entryDiv.className = `entry ${entry.clockOut ? 'completed-session' : 'active-session'}`;
                    let clockIn = entry.clockIn.format('h:mm:ss a');
                    let clockOut = entry.clockOut ? entry.clockOut.format('h:mm:ss a') : 'Active';
                    let duration = entry.clockOut ? formatDuration(moment.duration(entry.clockOut.diff(entry.clockIn))) : 'In progress';
                    let starIcon = entry.note ? '<span class="star">★</span>' : '';
                    let warningIcon = entry.keyMismatch ? '<span class="warning">⚠</span>' : '';
                    entryDiv.innerHTML = `
                        ${starIcon}${warningIcon}<strong>${cleaner}</strong><br>
                        Key: ${entry.key}<br>
                        Clock In: ${clockIn}<br>
                        Clock Out: ${clockOut}<br>
                        Duration: ${duration}<br>
                        Note: ${entry.note || 'N/A'}
                    `;
                    entriesDiv.appendChild(entryDiv);
                });
            }
        }

        function updateTimeline() {
            let timelineDiv = document.getElementById('timeline');
            time